#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 24 11:31:55 2024

@author: stage
"""

import numpy as np
from scipy import special
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import pandas as pd
import math

file_paths=[#'/home/stage/M2-Stage-Liphy/remplissage_sin_nada_8_co2.csv',
            '/home/stage/M2-Stage-Liphy/test_colonne_sans_mousse_test3_100_co2.csv',
            #'/home/stage/M2-Stage-Liphy/test_colonne_sans_mousse_test4_15_co2.csv',
            #'/home/stage/M2-Stage-Liphy/test_colonne_sans_mousse_15_co2.csv'
            #'/home/stage/M2-Stage-Liphy/test_colonne_sans_mousse_test4_50_co2.csv'
            ]

Q=80/(60*1000**2)    ## Debit impos√© en m3/s
A=0.125*0.09        ## Area de la section transversale de la colonne en m2
v=Q/A

for file_path in file_paths:
    db=pd.read_csv(file_path)
    x=db.index/2
    y=db['Media value concentration']/10000
    y=(db['Media value concentration']/10000)*100/(db['Media value concentration'].max()/100)
    # def func(t, D):
    #     epsilon=(v*t)/0.6
    #     eta=D/(v*0.6)
    #     return 0.5*(special.erfc((1-epsilon)/(2*np.sqrt(eta*epsilon)))+(np.exp(1/eta)*special.erfc((1+epsilon)/(2*np.sqrt(eta*epsilon)))))

    # popt, pcov=curve_fit(func, x, y )
    # popt
    
    
   ## Sans mousse 
    if '100' in file_path:
        label='1000 ml/min'
        Q=1000/(60*1000**2)
        A=0.125*0.09        ## Area de la section transversale de la colonne en m2
        v=Q/A
        def func(t, D):
            epsilon=(v*t)/0.6
            eta=D/(v*0.6)
            return 0.5*(special.erfc((1-epsilon)/(2*np.sqrt(eta*epsilon)))+(np.exp(1/eta)*special.erfc((1+epsilon)/(2*np.sqrt(eta*epsilon)))))
        popt, pcov=curve_fit(func, x, y )
        popt
        plt.scatter(x, y, label=f'{label} ', color='r', marker='o', s=1)
    
    if 'nada' in file_path:
        label='80 ml/min'
        Q=80/(60*1000**2)
        A=0.125*0.09        ## Area de la section transversale de la colonne en m2
        v=Q/A
        def func(t, D):
            epsilon=(v*t)/0.6
            eta=D/(v*0.6)
            return 0.5*(special.erfc((1-epsilon)/(2*np.sqrt(eta*epsilon)))+(np.exp(1/eta)*special.erfc((1+epsilon)/(2*np.sqrt(eta*epsilon)))))
        popt, pcov=curve_fit(func, x, y )
        popt
        plt.scatter(x, y, label=f'{label} ', color='k', marker='o', s=1)
   
    ### Avec de l'eau sans surfactant
    
    if '50' in file_path:
        label='50 ml/min'
        Q=500/(60*1000**2)
        A=0.125*0.09        ## Area de la section transversale de la colonne en m2
        v=Q/A
        def func(t, D):
            epsilon=(v*t)/0.6
            eta=D/(v*0.6)
            return 0.5*(special.erfc((1-epsilon)/(2*np.sqrt(eta*epsilon)))+(np.exp(1/eta)*special.erfc((1+epsilon)/(2*np.sqrt(eta*epsilon)))))
        popt, pcov=curve_fit(func, x, y )
        popt
        plt.scatter(x, y, label=f'{label} ', c='xkcd:carolina blue', marker='o', s=1)
    
    
    
    ## 600 ml eau sans surfactant
        
    if '15' in file_path:
        label='150 ml/min'
        Q=150/(60*1000**2)
        A=0.125*0.09        ## Area de la section transversale de la colonne en m2
        v=Q/A
        def func(t, D):
            epsilon=(v*t)/0.6
            eta=D/(v*0.6)
            return 0.5*(special.erfc((1-epsilon)/(2*np.sqrt(eta*epsilon)))+(np.exp(1/eta)*special.erfc((1+epsilon)/(2*np.sqrt(eta*epsilon)))))
        popt, pcov=curve_fit(func, x, y )
        popt
        plt.scatter(x, y, label=f'{label} ', color='b', marker='o', s=1)
        
    ### 300 ml 70% CMC SDS
    if 'SDS' in file_path:
        label='300 ml 1.7 g/L SDS'
        y=db['Media value concentration']/10000
        plt.scatter(x, y, label=f'{label} ', color='orchid', marker='o', s=1)
    if '160424' in file_path:
        label='300 ml 1.7 g/L SDS'
        plt.scatter(x, y, label=f'{label} ', color='orchid', marker='o', s=1)
          
    if 'plus' in file_path:
        label='600 ml 1.7 g/L SDS'
        plt.scatter(x, y, label=f'{label} ',  c='mediumorchid', marker='o', s=1)
        
    if '5gL' in file_path:
        label='300 m 5 g/L SDS'
        plt.scatter(x, y, label=f'{label} ', color='pink', marker='o', s=1)
    if 'coloree' in file_path:
        plt.scatter(x[::100], y[::100], c='pink', marker='o', s=1)
    if 'cinqgramesparlittre' in file_path:
        label='600 ml 5 g/L SDS'
        plt.scatter(x, y, label=f'{label} ',  c='xkcd:red violet', marker='o', s=1)
    
    
    if '3point5' in file_path:
        label='300 ml ASPIRO 3.5 g/L'
        plt.scatter(x, y, label=f'{label} ', color='red', marker='o', s=1)
    if '035gparL' in file_path:
        label='600 ml ASPIRO 3.5 g/L'
        plt.scatter(x, y, label=f'{label} ', c='xkcd:dark red', marker='o', s=1)
    #plt.scatter(x, y, label=f'{label} ', marker='o', s=1)
    #plt.plot(x, func(x, *popt), label='fit: D=%5.8f' %tuple(popt))
    

plt.xlabel('Time (s)', fontsize=40)
plt.ylabel(r'Concentration $CO_2$ ($\frac{n_{CO_2}}{n_{total}}$)', fontsize=40)
plt.legend(loc='lower right', fontsize='xx-large',markerscale=20)
plt.xticks(fontsize=40)
plt.yticks(fontsize=40)
plt.show()